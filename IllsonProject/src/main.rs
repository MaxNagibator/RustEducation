use axum::{
    http::StatusCode,
    routing::{get, post},
    Json, Router,
};
use dotenvy::dotenv;
use serde::{Deserialize, Serialize};
use std::sync::Arc;
use std::time::Duration;
use std::{env, fs};
use teloxide::{prelude::*, types::User};
use tracing::{debug, error, info};
pub type Error = Box<dyn std::error::Error + Send + Sync>;

mod config;
mod db;

use crate::config::Config;
use crate::db::PgPool;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    tracing_subscriber::fmt()
        .with_max_level(tracing::Level::DEBUG)
        .with_target(true)
        .with_timer(tracing_subscriber::fmt::time::time())
        .init();

    dotenv().ok();
    info!("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");

    let key = "TELOXIDE_TOKEN";
    if env::var(key).is_err() {
        let file_path = "E:\\bobgroup\\repo\\TelegramPomogatorBot\\token.txt";
        debug!("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {}", file_path);
        //file_path = "E:\\bobgroup\\projects\\Rust\\TestFile.txt";
        let token = fs::read_to_string(file_path)
            .inspect_err(|e| error!("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {}", e))?;
        unsafe {
            env::set_var(key, token.trim());
        }
    }

    let config =
        Config::from_env().inspect_err(|e| error!("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", e))?;
    debug!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");

    let pool = db::create_pool(&config.database_url)
        .inspect_err(|e| error!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ –ë–î: {}", e))?;
    let pool = Arc::new(pool);
    info!("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î —Å–æ–∑–¥–∞–Ω");

    run_bot(pool.clone())
        .await
        .inspect_err(|e| error!("–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {}", e))?;
    run_server(pool.clone(), config.server_address.clone())
        .await
        .inspect_err(|e| error!("–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞: {}", e))?;

    info!("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É");
    Ok(())
}

async fn run_bot(pool: Arc<PgPool>) -> Result<(), Box<dyn std::error::Error>> {
    info!("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞");

    let bot = Bot::from_env();
    let schema = Update::filter_message()
        .filter_map(|update: Update| update.from().cloned())
        .endpoint(process_message);

    Dispatcher::builder(bot, schema)
        .dependencies(dptree::deps![pool])
        .build()
        .dispatch()
        .await;

    info!("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    Ok(())
}

async fn run_server(pool: Arc<PgPool>, addr: String) -> Result<(), Box<dyn std::error::Error>> {
    info!("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {}", addr);

    let app = Router::new()
        .route("/", get(root))
        .route("/users", post(create_user))
        .with_state(pool)
        .layer(
            tower_http::trace::TraceLayer::new_for_http()
                .make_span_with(
                    tower_http::trace::DefaultMakeSpan::new()
                        .level(tracing::Level::INFO)
                        .include_headers(true),
                )
                .on_response(
                    tower_http::trace::DefaultOnResponse::new().level(tracing::Level::INFO),
                ),
        );

    let listener = tokio::net::TcpListener::bind(&addr)
        .await
        .inspect_err(|e| error!("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ {}: {}", addr, e))?;

    info!("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");
    axum::serve(listener, app)
        .await
        .inspect_err(|e| error!("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {}", e))?;

    info!("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    Ok(())
}

async fn process_message(
    bot: Bot,
    user: User,
    pool: Arc<PgPool>,
    msg: Message,
) -> Result<(), Error> {
    info!("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {:?}", msg);

    if let Some(text) = msg.text() {
        let command = text.trim().to_lowercase();
        debug!("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: '{}'", command);

        match command.as_str() {
            "join" => {
                let username = user.username.unwrap_or_default();
                let first_name = user.first_name;

                db::insert_user(&pool, user.id.0 as i32, username, first_name.clone())
                    .await
                    .inspect_err(|e| error!("–û—à–∏–±–∫–∞ –ë–î: {}", e))
                    .unwrap();

                bot.send_message(user.id, format!("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {}! üéâ", first_name))
                    .await
                    .inspect_err(|e| error!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e))
                    .unwrap();
            }
            "me" => {
                if let Some(user1) = db::get_user(&pool, user.id.0 as i32).await.unwrap() {
                    bot.send_message(
                        user.id,
                        format!(
                            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nID: {}\nUsername: @{}\n–ò–º—è: {}",
                            user1.chat_id, user1.username, user1.first_name
                        ),
                    )
                    .await?;
                } else {
                    bot.send_message(
                        user.id,
                        "–ú–∞–ª—ã—à, –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–ª–µ–Ω–æ–≤ –æ–±—â–µ—Å—Ç–≤–∞. –ù–∞–ø–∏—à–∏ 'join'",
                    )
                    .await?;
                }
            }
            _ => {
                if let Some(user1) = db::get_user(&pool, user.id.0 as i32).await.unwrap() {
                    bot.send_message(
                        user.id,
                        format!("–ü—Ä–∏–≤–µ—Ç, {}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", user1.first_name),
                    )
                    .await?;
                } else {
                    bot.send_message(user.id, "–ü—Ä–∏–≤–µ—Ç, –º–∞–ª—ã—à! –ù–∞–ø–∏—à–∏ 'join' –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä—è–¥–æ–≤")
                        .await?;
                }
            }
        }
    } else {
        bot.send_message(user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            .await?;
    }
    Ok(())
}

async fn root() -> &'static str {
    let mut tasks = Vec::new();
    for num in 1..4 {
        let task = sleep_time_complex(num, num);
        tasks.push(task);
        let task = sleep_time_complex(num, 4 - num);
        tasks.push(task);
    }

    futures::future::join_all(tasks).await;
    "2!"
}

async fn sleep_time_complex(name: u64, secs: u64) {
    println!("bla {} start", name);
    sleep_time(secs).await;
    println!("bla {name} finish {secs}",);
}

async fn create_user(Json(payload): Json<CreateUser>) -> (StatusCode, Json<User2>) {
    let user = User2 {
        id: 6062171111111,
        username: payload.username,
    };

    (StatusCode::CREATED, Json(user))
}

async fn sleep_time(seconds: u64) {
    tokio::time::sleep(Duration::from_secs(seconds)).await;
}

#[derive(Deserialize)]
struct CreateUser {
    username: String,
}

#[derive(Serialize)]
struct User2 {
    id: u64,
    username: String,
}
